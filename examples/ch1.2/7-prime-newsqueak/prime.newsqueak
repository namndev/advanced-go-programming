// Output a sequence of natural numbers starting at 2 to the pipeline
counter := prog(c:chan of int) {
	i := 2;
	for(;;) {
		c <-= i++;
	}
};

// For the sequence obtained by the listen pipeline
// filter out the number that is a multiple of prime
// New sequence output to the send pipeline
filter := prog(prime:int, listen, send:chan of int) {
	i:int;
	for(;;) {
		if((i = <-listen)%prime) {
			send <-= i;
		}
	}
};

// Main function
// The number of the first outflow of each pipe must be prime
// Then build a new prime filter based on this new prime number
sieve := prog() of chan of int {
	c := mk(chan of int);
	begin counter(c);
	prime := mk(chan of int);
	begin prog(){
		p:int;
		newc:chan of int;
		for(;;){
			prime <-= p =<- c;
			newc = mk();
			begin filter(p, c, newc);
			c = newc;
		}
	}();
	become prime;
};

// Start prime screen
prime := sieve();
